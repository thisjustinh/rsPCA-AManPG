spec.pgram(tozone, spans=c(3,3), taper=0, log="no")
spec.pgram(tozone, spans=c(9,9), taper=0, log="no")
spec.pgram(tozone, spans=c(15,15), taper=0, log="no")
spec.pgram(tozone, spans=c(21,21), taper=0, log="no")
ozone <- scan("ozone.dat")
tozone <- diff(diff(log(ozone)), 12)
spec.pgram(tozone, spans=c(3,3), taper=0, log="no")
spec.pgram(tozone, spans=c(9,9), taper=0, log="no")
final.tozone <- spec.pgram(tozone, spans=c(15,15), taper=0, log="no")
spec.pgram(tozone, spans=c(21,21), taper=0, log="no")
final.tozone$kernel
library(MASS)
library(ltsspca)
v1 <- c(1,1,1,1,0,0,0,0,0.9,0.9)
v2 <- c(0,0,0,0,1,1,1,1,-0.3,0.3)
v1 <- normalize(v1, center=FALSE)
v2 <- normalize(v2, center=FALSE)
v3 <- numeric(0)
for (i in 1:8) {
set.seed(1)
v3 <- c(v3, runif(10))
}
v3 <- normalize(v3, center=FALSE)
vstar <- matrix(c(v1, v2, v3), nrow=10, ncol=10)
v <- qr.Q(qr(vstar))
c <- diag(c(200,100,50,50,6,5,4,3,2,1))
sigma <- v %*% c %*% t(v)
source("~/Documents/Development/AManPG/R/amanpg/R/SPCA.R")
source("~/Documents/Development/rsPCA-AManPG/demo.R")
source("~/Documents/Development/rsPCA-AManPG/src.R")
source("~/Documents/Development/rsPCA-AManPG/src.R")
rspca.amanpg <- function(z, l1, k, tol=1e-5, maxiter=1000, fmax=1e6, type=0,
gamma=0.5, normalize=TRUE, verbose=FALSE) {
start <- Sys.time()
if (normalize) {
z <- normalize(z)
}
dims <- dim(z)
n <- dims[1]
p <- dims[2]
if (p < n * 2) {
z <- t(z) %*% z
type <- 1
}
### Initialized values ###
init_svd <- svd(z, nu=k, nv=k)
a <- init_svd$u / norm(init_svd$u, 'F')
b <- init_svd$d[1] * init_svd$v
ata <- t(a) %*% a
btb <- t(b) %*% b
# Get Lipschitz
# stepsize_a <- 0.01
stepsize_a <- 1 / (2 * svd(ata)$d[1])
stepsize_b <- 1 / (2 * svd(btb)$d[1])
linesearch_flag <- 1
total_linesearch <- 0
min_step <- 0
alpha <- 100 / p
grad_a <- 2 * stepsize_a * (z - a %*% t(b)) %*% b
### Main Loop ###
for (iter in 1:maxiter) {
if (verbose) {
iter_start <- Sys.time()
print("=================")
print(paste("On iteration", iter))
}
### Update A ###
# s = 2*t*(z-a %*% t(b)) %*% b
gtx <- t(grad_a) %*% a
da <- grad_a - a %*% (gtx + t(gtx)) / 2
## Retract ##
if (!linesearch_flag) alpha <- alpha * 1.1
if (min_step) alpha <- 1 / p
linesearch_flag <- 0
min_step <- 0
xi <- alpha * da
retracted_a <- polar_decomp(a, xi)
norm_retract <- norm(z - retracted_a %*% t(b), 'F')^2
while (norm_retract > norm(z - a %*% t(b), 'F')^2 - (alpha / (2*stepsize_a)) * norm(da, 'F')^2) {
alpha <- gamma * alpha
if (alpha < 1e-5 / p) {
min_step <- 1
break
}
linesearch_flag <- 1
total_linesearch <- total_linesearch + 1
xi <- alpha * da
retracted_a <- polar_decomp(a, xi)
norm_retract <- norm(z - retracted_a %*% t(b), 'F')^2
}
a <- retracted_a
ata <- t(a) %*% a
## Update B ##
grad_b <- 2 * stepsize_b * t(z - a %*%  t(b)) %*% a
c <- b + grad_b
tmp <- abs(c) - as.vector(l1 * stepsize_b)
if (k < 15) act_set <- as.numeric(tmp > 0) else act_set <- tmp > 0
db <-  tmp * act_set * sign(c) - b
# db <- matrix(1, nrow=p, ncol=k)
# for (i in 1:p) {
#   for (j in 1:k) {
#     db[i,j] <- stepsize_b * max(abs(c[i,j])-l1, 0) * sign(c[i,j])-b[i,j]
#   }
# }
# db <- c - b - stepsize_b * sign(c) * matrix(as.numeric(abs(c) > l1), nrow=p, ncol=k)  # done element-wise
#tmp <- abs(c) - as.vector(l1)
#if (k < 15) act_set <- as.numeric(tmp > 0) else act_set <- tmp > 0
#db <- act_set * sign(c) * stepsize_b
b <- b + db
btb <- t(b) %*% b
### Check for convergence ###
# check <- norm(da/stepsize_a)^2 + norm(db/stepsize_b)^2
prev_grad <- -grad_a/stepsize_a - grad_b/stepsize_b
# grad_a <- 2 * stepsize_a * (z %*% b - a %*% btb)
# grad_b <- 2 * stepsize_b * (t(z) %*% a - b %*% ata)
grad_a <- 2 * stepsize_a * (z - a %*% t(b)) %*% b
grad_b <- 2 * stepsize_b * t(z - a %*%  t(b)) %*% a
check <- norm(-grad_a/stepsize_a - grad_b/stepsize_b, 'F') - norm(prev_grad, 'F')
if (verbose) {
print(paste("difference:", check))
print(paste("time:", difftime(Sys.time(), iter_start)))
}
if (abs(check) <= tol || check > fmax) {
if (verbose) print(paste("Final difference:", check))
break
}
}
b_norm <- sqrt(colSums(b^2))
b_norm[b_norm == 0] <- 1
return(list(
iterations=iter,
scores=a,
b=b,
loadings=b / matrix(1, p, 1) %*% b_norm,
sparsity=sum(b == 0) / (p * k),
time=difftime(Sys.time(), start)
))
}
# Polar decomposition as retraction method
# Pretty sure this is correct
polar_decomp <- function(x, xi) {
eigendecomp_xi <- eigen(diag(1, dim(xi)[2]) + t(xi) %*% xi,
symmetric = TRUE)
u <- eigendecomp_xi$vectors
half_power <- u %*% diag(sqrt(1 / eigendecomp_xi$values)) %*% t(u)
return((x + xi) %*% half_power)
}
normalize <- function(x, center=TRUE, scale=TRUE) {
if (center) {
x <- scale(x, scale=FALSE)
}
if (scale) {
if (is.matrix(x)) {
dims <- dim(x)
x <- x / matrix(sqrt(rowSums(x^2)), nrow=dims[1], ncol=dims[2])
} else if (is.numeric(x)) {
x <- x / sqrt(sum(x^2))
} else {
stop("'x' must be a numeric vector or matrix")
}
}
return(x)
}
source("~/Documents/Development/rsPCA-AManPG/demo.R")
library(amanpg)
amanpg <- spca.amanpg(x, 1, 0.1, k=2, normalize=TRUE)
amanpg
sprout
source("~/Documents/Development/rsPCA-AManPG/src.R")
sprout <- rspca.amanpg(x, 1, 2, verbose=TRUE)
source("~/Documents/Development/rsPCA-AManPG/demo.R")
sprout
source("~/Documents/Development/rsPCA-AManPG/src.R")
sprout <- rspca.amanpg(x, 1, 2, verbose=TRUE)
sprout
source("~/Documents/Development/rsPCA-AManPG/demo.R")
sprout
source("~/Documents/Development/rsPCA-AManPG/src.R")
sprout <- rspca.amanpg(x, 1, 2, verbose=TRUE)
v3
source("~/Documents/Development/rsPCA-AManPG/demo.R")
v3
source("~/Documents/Development/rsPCA-AManPG/demo.R")
v3
library(tidyverse)
?read.table
cancer <- read.table("wdbc.data", sep=",")
setwd("~/Documents/Development/rsPCA-AManPG")
cancer <- read.table("wdbc.data", sep=",")
View(cancer)
cancer <- read.table("wdbc.data", sep=",") %>% select(-c(1, 2))
View(cancer)
sprout2 <- rspca.amanpg(as.matrix(cancer), 1, 2, normalize=TRUE, verbose=TRUE)
cancer <- normalize(cancer)
View(cancer)
sprout2 <- rspca.amanpg(as.matrix(cancer), 1, 2, verbose=TRUE)
sprout2 <- rspca.amanpg(as.matrix(cancer), 1, 2, verbose=TRUE, fmax=1e10)
sprout2
amanpg2 <- spca.amanpg(as.matrix(cancer), 1, 0.1, k=2)
amanpg2
amanpg2 <- spca.amanpg(as.matrix(cancer), 1, 0.05, k=2)
amanpg2 <- spca.amanpg(as.matrix(cancer), 1, 0.05, k=2, verbose=TRUE)
source("~/Documents/Development/rsPCA-AManPG/src.R")
sprout2 <- rspca.amanpg(as.matrix(cancer), 1, 2, verbose=TRUE)
source("~/Documents/Development/rsPCA-AManPG/src.R")
sprout <- rspca.amanpg(x, 1, 2, verbose=TRUE)
source("~/Documents/Development/rsPCA-AManPG/src.R")
sprout <- rspca.amanpg(x, 1, 2, verbose=TRUE)
sprout
v1 <- c(1,1,1,1,0,0,0,0,0.9,0.9)
v2 <- c(0,0,0,0,1,1,1,1,-0.3,0.3)
v1 <- normalize(v1, center=FALSE)
v2 <- normalize(v2, center=FALSE)
v3 <- numeric(0)
set.seed(1)
for (i in 1:8) {
v3 <- c(v3, runif(10))
}
v3 <- normalize(v3, center=FALSE)
vstar <- matrix(c(v1, v2, v3), nrow=10, ncol=10)
v <- qr.Q(qr(vstar))
c <- diag(c(200,200,5,5,6,5,4,3,2,1))
sigma <- v %*% c %*% t(v)
set.seed(1)
x <- mvrnorm(n=30, mu=rep(0, 10), Sigma=sigma)
sprout <- rspca.amanpg(x, 1, 2, verbose=TRUE)
sprout
c <- diag(c(200,100,5,5,6,5,4,3,2,1))
sigma <- v %*% c %*% t(v)
set.seed(1)
x <- mvrnorm(n=30, mu=rep(0, 10), Sigma=sigma)
sprout <- rspca.amanpg(x, 1, 2, verbose=TRUE)
sprout
cancer <- read.table("wdbc.data", sep=",") %>% select(-c(1, 2))  # drop ID and diagnosis
cancer <- normalize(cancer)
sprout2 <- rspca.amanpg(as.matrix(cancer), 1, 2, verbose=TRUE)
amanpg2 <- spca.amanpg(as.matrix(cancer), 1, 0.05, k=2, verbose=TRUE)
sprout2 <- rspca.amanpg(as.matrix(cancer), 1, 2, verbose=TRUE)
sprout2
source("~/Documents/Development/rsPCA-AManPG/src.R")
sprout2 <- rspca.amanpg(as.matrix(cancer), 1, 2, verbose=TRUE)
source("~/Documents/Development/rsPCA-AManPG/src.R")
source("~/Documents/Development/rsPCA-AManPG/demo.R")
sprout
sprout2 <- rspca.amanpg(as.matrix(cancer), 1, 2, verbose=TRUE)
sprout2
sprout2 <- rspca.amanpg(as.matrix(cancer), 1, 2, verbose=TRUE, maxiter=2000)
sprout2 <- rspca.amanpg(as.matrix(cancer), 1, 2, verbose=TRUE, maxiter=3000)
sprout2
sprout2 <- rspca.amanpg(as.matrix(cancer), 1, 2, verbose=TRUE, maxiter=2000, tol=1e-4)
sprout2
amanpg2 <- spca.amanpg(as.matrix(cancer), 1, 0.05, k=2, verbose=TRUE, maxiter=2000, tol=1e-4)
sprout2 <- rspca.amanpg(as.matrix(cancer), 1, 2, verbose=TRUE, maxiter=2000, tol=1e-4)
amanpg2 <- spca.amanpg(as.matrix(cancer), 1, 0.05, k=2, verbose=TRUE, maxiter=2000, tol=1e-4)
sprout2 <- rspca.amanpg(as.matrix(cancer), 1, 2, verbose=TRUE, maxiter=2000, tol=1e-4)
amanpg2 <- spca.amanpg(as.matrix(cancer), 1, 0.05, k=2, verbose=TRUE, maxiter=2000, tol=1e-4)
source("~/Documents/Development/rsPCA-AManPG/src.R")
sprout2 <- rspca.amanpg(as.matrix(cancer), 1, 2, verbose=TRUE, maxiter=2000, tol=1e-4)
source("~/Documents/Development/rsPCA-AManPG/src.R")
sprout2 <- rspca.amanpg(as.matrix(cancer), 1, 2, verbose=TRUE, maxiter=2000, tol=1e-4)
sprout <- rspca.amanpg(x, 1, 2, verbose=TRUE)
sprout2 <- rspca.amanpg(as.matrix(cancer), 1, 2, verbose=TRUE, maxiter=2000, tol=1e-4)
amanpg2 <- spca.amanpg(as.matrix(cancer), 1, 0.05, k=2, verbose=TRUE, maxiter=2000, tol=1e-4)
sprout2$time
amanpg2$time
sprout$time
amanpg <- spca.amanpg(x, 1, 0.1, k=2, normalize=TRUE)
amanpg$time
amanpg
amanpg <- spca.amanpg(x, 1, 0.01, k=2, normalize=TRUE)
amanpg
amanpg <- spca.amanpg(x, 0.5, 0.1, k=2, normalize=TRUE)
amanpg
sprout <- rspca.amanpg(x, 2, 2, verbose=TRUE)
sprout
amanpg <- spca.amanpg(x, 1, 0.1, k=2, normalize=TRUE)
amanpg
sprout$time
amanpg$time
sprout <- rspca.amanpg(x, 3, 2, verbose=TRUE)
sprout <- rspca.amanpg(x, 4, 2, verbose=TRUE)
sprout
source("~/Documents/Development/rsPCA-AManPG/demo.R")
sprout <- rspca.amanpg(x, 4, 2)
sprout$time
amanpg$time
amanpg <- spca.amanpg(x, 1, 0.1, k=2)
amanpg$time
sprout <- rspca.amanpg(x, 1, 2)
sprout$time
sprout <- rspca.amanpg(x, 1, 2)
sprout$time
sprout <- rspca.amanpg(x, 1, 2)
sprout$time
sprout <- rspca.amanpg(x, 1, 2)
source("~/Documents/Development/rsPCA-AManPG/src.R")
sprout <- rspca.amanpg(x, 1, 2)
sprout$time
sprout
source("~/Documents/Development/rsPCA-AManPG/demo.R")
amanpg
sprout <- rspca.amanpg(x, 1, 2)
sprout
amanpg <- spca.amanpg(x, 1, 0.1, k=2)
amanpg
sprout$time
sprout <- rspca.amanpg(x, 1, 2)
sprout$time
sprout <- rspca.amanpg(x, 1, 2)
sprout$time
amanpg <- spca.amanpg(x, 1, 0.1, k=2)
amanpg$time
sprout <- rspca.amanpg(x, 1, 2)
sprout$time
rsprout <- sPCA_rSVD(x, 2, center=T)
rsprout
cancer <- read.table("wdbc.data", sep=",") %>% select(-c(1, 2))  # drop ID and diagnosis
cancer <- normalize(cancer)
sprout2 <- rspca.amanpg(as.matrix(cancer), 1, 2, verbose=TRUE, maxiter=2000, tol=1e-4)
amanpg2 <- spca.amanpg(as.matrix(cancer), 1, 0.1, k=2, verbose=TRUE, maxiter=2000, tol=1e-4)
amanpg
amanpg2
amanpg2 <- spca.amanpg(as.matrix(cancer), 0.1, 0.1, k=2, verbose=TRUE, maxiter=2000, tol=1e-4)
amanpg2
amanpg2 <- spca.amanpg(as.matrix(cancer), 0.01, 0.1, k=2, verbose=TRUE, maxiter=2000, tol=1e-4)
amanpg2
rsprout
source("~/Documents/Development/rsPCA-AManPG/demo.R")
sprout$scores
apply(sprout$scores, 2, var)
source("~/Documents/Development/rsPCA-AManPG/src.R")
sprout <- rspca.amanpg(x, 1, 2)
source("~/Documents/Development/rsPCA-AManPG/src.R")
sprout <- rspca.amanpg(x, 1, 2)
sprout
# amanpg <- spca.amanpg(x, 1, 0.1, k=2)
rsprout <- sPCA_rSVD(x, 2, center=T)
rsprout
system.time(rsprout <- sPCA_rSVD(x, 2, center=T))
system.time(sprout <- rspca.amanpg(x, 1, 2))
cancer <- read.table("wdbc.data", sep=",") %>% select(-c(1, 2))  # drop ID and diagnosis
cancer <- normalize(cancer)
# amanpg2 <- spca.amanpg(as.matrix(cancer), 1, 0.1, k=2, verbose=TRUE, maxiter=2000, tol=1e-4)
system.time(rsprout2 <- sPCA_rSVD(x, 2, center=T))
system.time(sprout2 <- rspca.amanpg(as.matrix(cancer), 1, 2, verbose=TRUE, maxiter=2000, tol=1e-4))
system.time(sprout2 <- rspca.amanpg(as.matrix(cancer), 1, 2, maxiter=2000, tol=1e-4))
# amanpg2 <- spca.amanpg(as.matrix(cancer), 1, 0.1, k=2, verbose=TRUE, maxiter=2000, tol=1e-4)
system.time(rsprout2 <- sPCA_rSVD(x, 2, center=T))
# Generated data
set.seed(1)
x <- mvrnorm(n=300, mu=rep(0, 10), Sigma=sigma)
system.time(sprout <- rspca.amanpg(x, 1, 2))
system.time(rsprout <- sPCA_rSVD(x, 2, center=T))
source("~/Documents/Development/rsPCA-AManPG/demo.R")
source("~/Documents/Development/rsPCA-AManPG/src.R")
system.time(sprout <- rspca.amanpg(x, 1, 2))
system.time(rsprout <- sPCA_rSVD(x, 2, center=T))
x <- mvrnorm(n=30, mu=rep(0, 10), Sigma=sigma)
system.time(sprout <- rspca.amanpg(x, 1, 2))
system.time(rsprout <- sPCA_rSVD(x, 2, center=T))
?sPCA_rSVD
if (p < n * 2 && n > 100) {
z <- t(z) %*% z
type <- 1
}
source("~/Documents/Development/rsPCA-AManPG/src.R")
x <- mvrnorm(n=30, mu=rep(0, 10), Sigma=sigma)
# Generated data
set.seed(1)
x <- mvrnorm(n=30, mu=rep(0, 10), Sigma=sigma)
system.time(sprout <- rspca.amanpg(x, 1, 2))
system.time(rsprout <- sPCA_rSVD(x, 2, center=T))
system.time(sprout <- rspca.amanpg(x, 1, 2))
system.time(sprout <- rspca.amanpg(x, 1, 2))
system.time(rsprout <- sPCA_rSVD(x, 2, center=T))
system.time(sprout <- rspca.amanpg(x, 1, 2))
system.time(sprout <- rspca.amanpg(x, 1, 2))
system.time(rsprout <- sPCA_rSVD(x, 2, center=T))
system.time(sprout <- rspca.amanpg(x, 1, 2))
system.time(rsprout <- sPCA_rSVD(x, 2, center=T))
system.time(sprout <- rspca.amanpg(x, 1, 2))
system.time(rsprout <- sPCA_rSVD(x, 2, center=T))
source("~/Documents/Development/rsPCA-AManPG/src.R")
system.time(sprout <- rspca.amanpg(x, 1, 2))
system.time(rsprout <- sPCA_rSVD(x, 2, center=T))
system.time(sprout <- rspca.amanpg(x, 1, 2))
system.time(rsprout <- sPCA_rSVD(x, 2, center=T))
system.time(sprout <- rspca.amanpg(x, 1, 2))
sprout$loadings
sprout$scores
source("~/Documents/Development/rsPCA-AManPG/demo.R")
apply(sprout$loadings, 2, var)
sprout$loadings
apply(sprout$scores, 2, var)
sprout$scores
apply(abs(sprout$scores), 2, var)
rsprout$scores
apply(rsprout$scores, 2, var)
x
var(x)
?var
sum(apply(x))
sum(apply(x, 2, var))
sum(apply(normalize(x), 2, var))
prcomp(x)
whathtefukcl;ajs;ld;fka;lksdf
apply(rsprout$scores, 2, var)
171/264
source("~/Documents/Development/rsPCA-AManPG/src.R")
plot(apply(rsprout$socres, 2, var))
plot(apply(rsprout$scores, 2, var))
plot(1:k, apply(rsprout$scores, 2, var))
plot(1:2, apply(rsprout$scores, 2, var))
plot(1:2, apply(rsprout$scores, 2, var))
len(rsprout$loadings)
length(rsprout$loadings)
ncol
source("~/Documents/Development/rsPCA-AManPG/src.R")
system.time(sprout <- rspca.amanpg(x, 1, 2))
sprout$loadings
sprout$scores
scree.plot(sprout$loadings, x)
system.time(sprout <- rspca.amanpg(x, 1, 10))
sprout$loadings
system.time(rsprout <- sPCA_rSVD(x, 10, center=T))
rsprout$loadings
?sPCA_rSVD
system.time(sprout <- rspca.amanpg(x, 0.5, 10))
sprout$loadings
rsprout$loadings
source("~/Documents/Development/rsPCA-AManPG/src.R")
system.time(sprout <- rspca.amanpg(x, 0.5, 10))
sprout$loadings
source("~/Documents/Development/rsPCA-AManPG/demo.R")
sprout$loadings
system.time(sprout <- rspca.amanpg(x, 1, 10))
sprout$loadings
system.time(sprout <- rspca.amanpg(x, 0.1, 10))
sprout$loadings
source("~/Documents/Development/AManPG/R/amanpg/R/SPCA.R")
spca.amanpg(x, 1, 0.1)
spca.amanpg(x, 0.1, 0.1)
spca.amanpg(x, 2, 0.1)
spca.amanpg(x, 3, 0.1)
spca.amanpg(x, 1, 0.1)
spca.amanpg(x, 0.5, 0.1)
spca.amanpg(x, 1, 0.1)
spca.amanpg(x, 1, 0.1)
spca.amanpg(x, 1, 1)
source("~/Documents/Development/rsPCA-AManPG/demo.R")
normalize <- function(x, center=TRUE, scale=TRUE) {
if (center) {
x <- scale(x, scale=FALSE)
}
if (scale) {
if (is.matrix(x)) {
dims <- dim(x)
x <- x / matrix(sqrt(rowSums(x^2)), nrow=dims[1], ncol=dims[2])
} else if (is.numeric(x)) {
x <- x / sqrt(sum(x^2))
} else {
stop("'x' must be a numeric vector or matrix")
}
}
return(x)
}
source("~/Documents/Development/rsPCA-AManPG/demo.R")
sprout
system.time(sprout <- rspca.amanpg(x, 1, 10))
scree.plot(sprout$loadings, x)
system.time(sprout <- rspca.amanpg(x, 1, 2))
sprout
scree.plot(sprout$loadings, x)
source("~/Documents/Development/rsPCA-AManPG/demo.R")
source("~/Documents/Development/rsPCA-AManPG/src.R")
system.time(sprout <- rspca.amanpg(x, 1, 2))
sprout
source("~/Documents/Development/rsPCA-AManPG/src.R")
system.time(sprout <- rspca.amanpg(x, 1, 2))
sprout$loadings
system.time(sprout <- rspca.amanpg(x, 1.5, 2))
sprout$loadings
system.time(rsprout <- sPCA_rSVD(x, 10, center=T))
rsprout$loadings
scree.plot(rsprout, x, noramlized=FALSE)
scree.plot(rsprout, x, normalized=FALSE)
source("~/Documents/Development/rsPCA-AManPG/src.R")
scree.plot(rsprout, x, normalized=FALSE)
system.time(sprout <- rspca.amanpg(x, 1, 2))
sprout
source("~/Documents/Development/rsPCA-AManPG/src.R")
system.time(sprout <- rspca.amanpg(x, 1, 2))
sprout
scree.plot(sprout, x)
system.time(sprout <- rspca.amanpg(x, 1, 2, verbose=TRUE))
source("~/Documents/Development/rsPCA-AManPG/src.R")
system.time(sprout <- rspca.amanpg(x, 1, 2, verbose=TRUE))
if (p < n * 2 && n > 100) {
z <- t(z) %*% z
type <- 1
}
source("~/Documents/Development/rsPCA-AManPG/src.R")
system.time(sprout <- rspca.amanpg(x, 1, 2, verbose=TRUE))
sprout$scores
sprout$loadings
scree.plot(sprout, x)
system.time(sprout <- rspca.amanpg(x, 1, 10, verbose=TRUE))
scree.plot(sprout, x)
scree.plot(rsprout, x, normalized=FALSE)
sprout
source("~/Documents/Development/rsPCA-AManPG/src.R")
source("~/Documents/Development/rsPCA-AManPG/demo.R")
